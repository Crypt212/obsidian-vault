{
	"nodes":[
		{"id":"f78c2feb2d5956d3","x":-320,"y":-300,"width":600,"height":433,"type":"text","text":"2025-07-23 18:22\nTags:  \n# Rust\n\nRust is a low-level programming for developing fast and reliable software, it is a compiled statically-typed language with no garbage collection while applying strict rules to preserve better memory management.\n\n\n## Installation\n\n- Install [[rustup]] cli tool managing rust versions and associated tools.\n- Install a linker, could just be the C linker that comes with [[GCC]] or [[Clang]].\n- Install [[cargo]] used for build the rust app and managing its dependancies.\n\n\n## Create a project with cargo\n\n``` bash\ncargo new hello_cargo\n$ cd hello_cargo\n```\n\nThis initialised a [[Rust]] project, it also initialises it as a [[Git]] repo, [[Git]] files won’t be generated if you run cargo new within an existing [[Git]] repository; you can override this behaviour by using:\n\n``` bash\ncargo new --vcs=git\n```\n\nCargo project has a config file _Cargo.toml_ which is a [[TOML]] file, it has 2 sections:\n\n- `[package]` which specifies configurations for packages.\n- `[dependencies]` which specifies the dependencies of the project\n\nBuild the project using `cargo build`, this command creates an executable file in _target/debug/hello_cargo_ rather than in your current directory. Because the default build is a debug build.\n\n`cargo run`, this builds and runs in one command.\n\n`cargo check`, this command quickly checks your code to make sure it compiles but doesn’t produce an executable.\n\n`cargo build --release` is used when the project is finally ready for release, it compiles with optimizations and faster run.\n\nIf benchmarking, compile in release mode.\n\n# References\n\nhttps://doc.rust-lang.org/book/ch01-03-hello-cargo.html"},
		{"id":"1097142f489bf881","x":-145,"y":-34,"width":525,"height":334,"type":"text","text":"2025-07-23 21:44\nTags: \n\n# \n\n"}
	],
	"edges":[]
}